const axios = require('axios');

exports.handler = async () => {
  try {
    // Fetch BNB/USDT from Serenity
    const bnb = await axios.get('https://www.serenity.exchange/api/v2/trade/coingecko/tickers')
      .then(res => ({
        pair: "BNB/USDT",
        base: "BNB",
        target: "USDT",
        price: parseFloat(res.data.find(p => p.ticker_id === "BNB_USDT").last_price),
        volume: parseFloat(res.data.find(p => p.ticker_id === "BNB_USDT").base_volume),
        bid: parseFloat(res.data.find(p => p.ticker_id === "BNB_USDT").bid),
        ask: parseFloat(res.data.find(p => p.ticker_id === "BNB_USDT").ask),
        high: parseFloat(res.data.find(p => p.ticker_id === "BNB_USDT").high),
        low: parseFloat(res.data.find(p => p.ticker_id === "BNB_USDT").low)
      }));

    // Fetch OneDex pairs
    const oneDex = await axios.get('https://api.coingecko.com/api/v3/exchanges/onedex/tickers')
      .then(res => res.data.tickers.map(p => ({
        pair: `${p.base}/${p.target}`,
        base: p.base,
        target: p.target,
        price: p.last,
        volume: p.volume,
        bid: p.bid_ask_spread_percentage ? p.last * (1 - p.bid_ask_spread_percentage/200) : null,
        ask: p.bid_ask_spread_percentage ? p.last * (1 + p.bid_ask_spread_percentage/200) : null,
        high: p.high || null,
        low: p.low || null
      })));

    return {
      statusCode: 200,
      body: JSON.stringify({
        status: "success",
        data: [bnb, ...oneDex],
        lastUpdated: Date.now()
      }, null, 2)
    };
  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify({ 
        status: "error", 
        message: error.message 
      })
    };
  }
};